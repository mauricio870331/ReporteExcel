/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Conexion;

import Model.Data;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.quartz.Job;
import static org.quartz.JobBuilder.newJob;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerFactory;
import static org.quartz.SimpleScheduleBuilder.simpleSchedule;
import org.quartz.Trigger;
import static org.quartz.TriggerBuilder.newTrigger;

public class JavaPoiUtils1 implements Job {

    static Connection cn;
    static Connection con3 = null;
    static PreparedStatement pstm;
    static ResultSet rs;
    SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
    static CallableStatement cstmt;

    public void readExcelFile(File excelFile) {

        InputStream excelStream = null;
        try {
            excelStream = new FileInputStream(excelFile);
            // High level representation of a workbook.
            // Representación del más alto nivel de la hoja excel.
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook(excelStream);
            // We chose the sheet is passed as parameter. 
            // Elegimos la hoja que se pasa por parámetro.
            HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(0);
            // An object that allows us to read a row of the excel sheet, and extract from it the cell contents.
            // Objeto que nos permite leer un fila de la hoja excel, y de aquí extraer el contenido de las celdas.
            HSSFRow hssfRow;
            // Initialize the object to read the value of the cell 
            // Inicializo el objeto que leerá el valor de la celda
            HSSFCell cell;
            // I get the number of rows occupied on the sheet
            // Obtengo el número de filas ocupadas en la hoja
            int rows = hssfSheet.getLastRowNum();
            System.out.println("rows " + rows);
            // I get the number of columns occupied on the sheet
            // Obtengo el número de columnas ocupadas en la hoja
            int cols = 0;
            // A string used to store the reading cell
            // Cadena que usamos para almacenar la lectura de la celda
            String cellValue = "";
            // For this example we'll loop through the rows getting the data we want
            // Para este ejemplo vamos a recorrer las filas obteniendo los datos que queremos  
            String datos = "";
            for (int r = 1; r < rows; r++) {
                hssfRow = hssfSheet.getRow(r);
                if (hssfRow == null) {
                    break;
                } else {
//                    System.out.print("Row: " + r + " -> ");
                    for (int c = 0; c < (cols = hssfRow.getLastCellNum()); c++) {
                        /* 
                            We have those cell types (tenemos estos tipos de celda): 
                                CELL_TYPE_BLANK, CELL_TYPE_NUMERIC, CELL_TYPE_BLANK, CELL_TYPE_FORMULA, CELL_TYPE_BOOLEAN, CELL_TYPE_ERROR
                         */
                        cellValue = hssfRow.getCell(c) == null ? ""
                                : (hssfRow.getCell(c).getCellType() == Cell.CELL_TYPE_STRING) ? hssfRow.getCell(c).getStringCellValue()
                                : (hssfRow.getCell(c).getCellType() == Cell.CELL_TYPE_NUMERIC) ? "" + hssfRow.getCell(c).getNumericCellValue()
                                : (hssfRow.getCell(c).getCellType() == Cell.CELL_TYPE_BOOLEAN) ? "" + hssfRow.getCell(c).getBooleanCellValue()
                                : (hssfRow.getCell(c).getCellType() == Cell.CELL_TYPE_BLANK) ? "BLANK"
                                : (hssfRow.getCell(c).getCellType() == Cell.CELL_TYPE_FORMULA) ? "FORMULA"
                                : (hssfRow.getCell(c).getCellType() == Cell.CELL_TYPE_ERROR) ? "ERROR" : "";
//                        System.out.print(" "+ cellValue + "");
                        datos += cellValue + ",";
                    }

                }
                datos += "-";
//                System.out.println("");                
            }

            System.out.println("datos " + datos);
            String[] datosS = datos.split("-");
//            System.out.println(datosS.length);

            for (int i = 0; i < datosS.length; i++) {
                System.out.println(datosS[i]);
            }
        } catch (FileNotFoundException fileNotFoundException) {
            System.out.println("The file not exists (No se encontró el fichero): " + fileNotFoundException);
        } catch (IOException ex) {
            System.out.println("Error in file procesing (Error al procesar el fichero): " + ex);
        } finally {
            try {
                excelStream.close();
            } catch (IOException ex) {
                System.out.println("Error in file processing after close it (Error al procesar el fichero después de cerrarlo): " + ex);
            }
        }
    }

    public void probar() throws SQLException, FileNotFoundException, IOException {

        try {
            ArrayList<Data> listDatos = new ArrayList();
            cn = Conexion.conectar();
            String query = "select * from [dbo].[DatosExcel]('" + formato.format(new Date()) + " 00:00:00','" + formato.format(new Date()) + " 23:59:59',0,1,-1)";
//            System.out.println("query " + query);
            pstm = cn.prepareStatement(query);
            rs = pstm.executeQuery();
            while (rs.next()) {
                listDatos.add(new Data(rs.getString(1), rs.getInt(2), rs.getInt(3), rs.getInt(4), rs.getInt(5)));
//                System.out.println(rs.getString(1) + " " + rs.getInt(2) + " " + rs.getInt(3) + " " + rs.getInt(4) + " " + rs.getInt(5));
            }
            XSSFWorkbook workBook = new XSSFWorkbook();            

            XSSFSheet sheet = workBook.createSheet("Datos Agencias");            

            XSSFRow row;
            XSSFCell cell;
            row = sheet.createRow(0);
            cell = row.createCell(0);
            cell.setCellValue("AGENCIA");
            cell = row.createCell(1);
            cell.setCellValue("PASAJES");
            cell = row.createCell(2);
            cell.setCellValue("IMPORTEBASE");
            cell = row.createCell(3);
            cell.setCellValue("DESCUENTOS");
            cell = row.createCell(4);
            cell.setCellValue("FINAL");
            for (int r = 0; r < listDatos.size(); r++) {
                row = sheet.createRow(r + 1);            
                for (int c = 0; c < 5; c++) {
                    cell = row.createCell(c);
                    if (c == 0) {
                        cell.setCellValue(listDatos.get(r).getAgencia());
                    }
                    if (c == 1) {
                        cell.setCellValue(listDatos.get(r).getPasajes());
                    }
                    if (c == 2) {
                        cell.setCellValue(listDatos.get(r).getImporteBase());
                    }
                    if (c == 3) {
                        cell.setCellValue(listDatos.get(r).getDescuentos());
                    }
                    if (c == 4) {
                        cell.setCellValue(listDatos.get(r).getVfinal());
                    }
                }
            }
            //Escribimos el resultado en fichero
            String nombreFichero = "Z:/DatosExcel.xlsx";
            File file = new File(nombreFichero);
            try (FileOutputStream fileOut = new FileOutputStream(file)) {                
                workBook.write(fileOut);
                fileOut.flush();
                fileOut.close();
            }

            cstmt = cn.prepareCall("{call EnviarEmailConAdjuntos (?,?,?,?,?)}");
            cstmt.setString(1, "Email Sistemas");
            cstmt.setString(2, "desarrollo1@expresopalmira.com.co");
            cstmt.setString(3, "Prueba reporte");
            cstmt.setString(4, "revisar si llego");
            cstmt.setString(5, "\\\\192.168.10.1\\ExcelParaEmail\\DatosExcel.xlsx");
            cstmt.execute();

        } catch (SQLException e) {
            System.out.println("error " + e);
        } finally {
            cn.close();
            pstm.close();
        }
    }

    @Override
    public void execute(JobExecutionContext jec) throws JobExecutionException {
        try {
            System.out.println("Generando excel");
            probar();
        } catch (SQLException | IOException ex) {
            System.out.println("error");
        }
    }

    public void ejecutarCron() throws SchedulerException {
        SchedulerFactory schedFact = new org.quartz.impl.StdSchedulerFactory();
        Scheduler sched = schedFact.getScheduler();
        sched.start();
        // define the job and tie it to our HelloJob class
        JobDetail job = newJob(JavaPoiUtils1.class).withIdentity("myJob", "group1").build();
        // Trigger the job to run now, and then every 40 seconds
        Trigger trigger = newTrigger()
                .withIdentity("myTrigger", "group1")
                .startNow()
                .withSchedule(simpleSchedule()
                        .withIntervalInMinutes(60)
                        .repeatForever())
                .build();
        // Tell quartz to schedule the job using our trigger
        sched.scheduleJob(job, trigger);
    }

    public void enviarMalCron() throws AddressException, MessagingException {
        Properties props = new Properties();
        props.setProperty("mail.smtp.host", "smtp.gmail.com");//gmail, etc
        props.setProperty("mail.smtp.starttls.enable", "true");
// Puerto de gmail para envio de correos
        props.setProperty("mail.smtp.port", "587");
// Nombre del usuario
        props.setProperty("mail.smtp.user", "desarrollo1expresopalmira@gmail.com");
// Si requiere o no usuario y password para conectarse.
        props.setProperty("mail.smtp.auth", "true");

        Session session = Session.getDefaultInstance(props);
        session.setDebug(true);

        BodyPart texto = new MimeBodyPart();
        texto.setText("Texto del mensaje");

        BodyPart adjunto = new MimeBodyPart();
        adjunto.setDataHandler(new DataHandler(new FileDataSource("C:/fichero.txt")));
        adjunto.setFileName("fichero.txt");

        MimeMultipart multiParte = new MimeMultipart();

        multiParte.addBodyPart(texto);
        multiParte.addBodyPart(adjunto);

        MimeMessage message = new MimeMessage(session);

        // Quien envia el correo
        message.setFrom(new InternetAddress("desarrollo1expresopalmira@gmail.com"));

// A quien va dirigido
        message.addRecipient(Message.RecipientType.TO, new InternetAddress("desarrollo1@expresopalmira.com.co"));

        message.setSubject("Hola");
//        message.setText("Mensajito con Java Mail"
//                + "de los buenos."
//                + "poque si");

        message.setContent(multiParte);

        Transport t = session.getTransport("smtp");
        t.connect("desarrollo1expresopalmira@gmail.com", "1113626301");
        t.sendMessage(message, message.getAllRecipients());
        t.close();

    }

}
